{"version":3,"sources":["example2.js"],"names":["Promise","resolve","reject","setTimeout","then","data","console","log","Error","error","catch"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEAA,OAAO,CAACC,OAAR;AAEAD,OAAO,CAACC,OAAR,CAAgB,IAAID,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC7CC,EAAAA,UAAU,CAAC,YAAM;AACbF,IAAAA,OAAO,CAAC,OAAD,CAAP;AACH,GAFS,EAEP,IAFO,CAAV;AAGH,CAJe,CAAhB,EAIIG,IAJJ,CAIS,UAACC,IAAD,EAAU;AACfC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,IAAjC;AACH,CAND;AAQAL,OAAO,CAACC,OAAR,CAAgB,KAAhB,EAAuBG,IAAvB,CAA4B,UAACC,IAAD,EAAU;AAClCC,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,IAArC;AACH,CAFD;AAIA;;AAEAL,OAAO,CAACE,MAAR;AAEAF,OAAO,CAACE,MAAR,CAAe,IAAIM,KAAJ,CAAU,QAAV,CAAf,EAAoCJ,IAApC,CAAyC,UAAAK,KAAK,EAAI,CAEjD,CAFD,EAEGC,KAFH,CAES,UAACD,KAAD,EAAW;AAChBH,EAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACH,CAJD","file":"example2.d0ef11d3.js","sourceRoot":"..","sourcesContent":["/* \nvalue 가 프로미스 객체인지 아닌지 알 수 없는 경우, Promise.resolve() 를 사용하면 연결된 then 메서드를 실행한다. \n    value 가 프로미스 객체면, resolve 된 then 메서드를 실행한다. \n    value 가 프로미스 객체가 아니면, value 를 인자로 보내면서 then 메서드를 실행한다. \n*/\n\nPromise.resolve( /* value */ );\n\nPromise.resolve(new Promise((resolve, reject) => {\n    setTimeout(() => {\n        resolve('hello');\n    }, 1000);\n})).then((data) => {\n    console.log('value 가 프로미스 객체일때', data);\n});\n\nPromise.resolve('foo').then((data) => {\n    console.log('value 가 프로미스 객체가 아닐 때', data);\n})\n\n/* Promise.reject() 를 사용하면, catch 로 연결된 rejected 상태로 연결된다. */\n\nPromise.reject( /* value: 주로 에러 객체가 온다 */ );\n\nPromise.reject(new Error('reason')).then(error => {\n\n}).catch((error) => {\n    console.log(error);\n})"]}