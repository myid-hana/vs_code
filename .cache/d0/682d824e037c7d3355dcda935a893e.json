{"id":"async_await.js","dependencies":[{"name":"/Users/parkhana/Desktop/vs_code/package.json","includedInParent":true,"mtime":1605185926014},{"name":"core-js/stable","loc":{"line":1,"column":7},"parent":"/Users/parkhana/Desktop/vs_code/async_await.js","resolved":"/Users/parkhana/Desktop/vs_code/node_modules/core-js/stable/index.js"},{"name":"regenerator-runtime/runtime","loc":{"line":2,"column":7},"parent":"/Users/parkhana/Desktop/vs_code/async_await.js","resolved":"/Users/parkhana/Desktop/vs_code/node_modules/regenerator-runtime/runtime.js"}],"generated":{"js":"\"use strict\";\n\nrequire(\"core-js/stable\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n/*\nasync function 함수이름() {}    \nconst 함수이름 = async () => {}\n함수이름 앞에 async 를 붙여서 사용한다. \n*/\n//async-await 는 Promise 를 기반으로 하고, 코드의 흐름을 위에서 아래의 방향으로 짤 수 있다는 것이 장점이다. \n//Promise 객체를 리턴하는 함수\nfunction p(ms) {\n  return new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      // resolve(ms);\n      reject(new Error('reason'));\n    }, ms);\n  });\n} //Promise 객체를 리턴하는 함수를 await 로 호출하는 방법 \n//await 를 사용하는 경우, 항상 async 함수 안에서 사용되어야 한다. \n\n\n(function () {\n  var _main = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    var ms;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return p(1000);\n\n          case 3:\n            ms = _context.sent;\n            //비동기된 처리가 끝날 때까지 기다렸다가 ms 값을 리턴하고 아래줄을 실행한다. \n            console.log(ms + ' hello');\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 7]]);\n  }));\n\n  function main() {\n    return _main.apply(this, arguments);\n  }\n\n  return main;\n})()(); //Promise 객체가 rejected 된 경우의 처리를 위해 try catch 를 이용한다."},"sourceMaps":{"js":{"mappings":[{"generated":{"line":3,"column":0},"source":"async_await.js","original":{"line":1,"column":0}},{"generated":{"line":5,"column":0},"source":"async_await.js","original":{"line":2,"column":0}},{"generated":{"line":11,"column":0},"source":"async_await.js","original":{"line":3,"column":0}},{"generated":{"line":12,"column":0},"source":"async_await.js","original":{"line":4,"column":0}},{"generated":{"line":13,"column":0},"source":"async_await.js","original":{"line":5,"column":0}},{"generated":{"line":14,"column":0},"source":"async_await.js","original":{"line":6,"column":0}},{"generated":{"line":15,"column":0},"source":"async_await.js","original":{"line":7,"column":0}},{"generated":{"line":16,"column":0},"source":"async_await.js","original":{"line":9,"column":0}},{"generated":{"line":17,"column":0},"source":"async_await.js","original":{"line":11,"column":0}},{"generated":{"line":18,"column":0},"source":"async_await.js","original":{"line":12,"column":0}},{"name":"p","generated":{"line":18,"column":9},"source":"async_await.js","original":{"line":12,"column":9}},{"generated":{"line":18,"column":10},"source":"async_await.js","original":{"line":12,"column":0}},{"name":"ms","generated":{"line":18,"column":11},"source":"async_await.js","original":{"line":12,"column":11}},{"generated":{"line":18,"column":13},"source":"async_await.js","original":{"line":12,"column":0}},{"generated":{"line":18,"column":15},"source":"async_await.js","original":{"line":12,"column":15}},{"generated":{"line":19,"column":0},"source":"async_await.js","original":{"line":13,"column":4}},{"generated":{"line":19,"column":9},"source":"async_await.js","original":{"line":13,"column":11}},{"name":"Promise","generated":{"line":19,"column":13},"source":"async_await.js","original":{"line":13,"column":15}},{"generated":{"line":19,"column":20},"source":"async_await.js","original":{"line":13,"column":11}},{"generated":{"line":19,"column":21},"source":"async_await.js","original":{"line":13,"column":23}},{"name":"resolve","generated":{"line":19,"column":31},"source":"async_await.js","original":{"line":13,"column":24}},{"generated":{"line":19,"column":38},"source":"async_await.js","original":{"line":13,"column":23}},{"name":"reject","generated":{"line":19,"column":40},"source":"async_await.js","original":{"line":13,"column":33}},{"generated":{"line":19,"column":46},"source":"async_await.js","original":{"line":13,"column":23}},{"generated":{"line":19,"column":48},"source":"async_await.js","original":{"line":13,"column":44}},{"name":"setTimeout","generated":{"line":20,"column":0},"source":"async_await.js","original":{"line":14,"column":8}},{"name":"setTimeout","generated":{"line":20,"column":4},"source":"async_await.js","original":{"line":14,"column":8}},{"generated":{"line":20,"column":14},"source":"async_await.js","original":{"line":14,"column":18}},{"generated":{"line":20,"column":15},"source":"async_await.js","original":{"line":14,"column":19}},{"generated":{"line":20,"column":27},"source":"async_await.js","original":{"line":14,"column":25}},{"generated":{"line":21,"column":0},"source":"async_await.js","original":{"line":15,"column":12}},{"name":"reject","generated":{"line":22,"column":0},"source":"async_await.js","original":{"line":16,"column":12}},{"name":"reject","generated":{"line":22,"column":6},"source":"async_await.js","original":{"line":16,"column":12}},{"generated":{"line":22,"column":12},"source":"async_await.js","original":{"line":16,"column":18}},{"generated":{"line":22,"column":13},"source":"async_await.js","original":{"line":16,"column":19}},{"name":"Error","generated":{"line":22,"column":17},"source":"async_await.js","original":{"line":16,"column":23}},{"generated":{"line":22,"column":22},"source":"async_await.js","original":{"line":16,"column":19}},{"generated":{"line":22,"column":23},"source":"async_await.js","original":{"line":16,"column":29}},{"generated":{"line":22,"column":31},"source":"async_await.js","original":{"line":16,"column":19}},{"generated":{"line":22,"column":32},"source":"async_await.js","original":{"line":16,"column":18}},{"generated":{"line":22,"column":33},"source":"async_await.js","original":{"line":16,"column":12}},{"generated":{"line":23,"column":0},"source":"async_await.js","original":{"line":17,"column":9}},{"generated":{"line":23,"column":5},"source":"async_await.js","original":{"line":14,"column":18}},{"name":"ms","generated":{"line":23,"column":7},"source":"async_await.js","original":{"line":17,"column":11}},{"generated":{"line":23,"column":9},"source":"async_await.js","original":{"line":14,"column":18}},{"generated":{"line":23,"column":10},"source":"async_await.js","original":{"line":14,"column":8}},{"generated":{"line":24,"column":0},"source":"async_await.js","original":{"line":18,"column":5}},{"generated":{"line":24,"column":3},"source":"async_await.js","original":{"line":13,"column":11}},{"generated":{"line":24,"column":4},"source":"async_await.js","original":{"line":13,"column":4}},{"generated":{"line":25,"column":0},"source":"async_await.js","original":{"line":19,"column":1}},{"generated":{"line":25,"column":2},"source":"async_await.js","original":{"line":21,"column":0}},{"generated":{"line":26,"column":0},"source":"async_await.js","original":{"line":22,"column":0}},{"generated":{"line":29,"column":0},"source":"async_await.js","original":{"line":23,"column":0}},{"generated":{"line":30,"column":0},"source":"async_await.js","original":{"line":23,"column":0}},{"generated":{"line":30,"column":70},"source":"async_await.js","original":{"line":23,"column":1}},{"generated":{"line":31,"column":0},"source":"async_await.js","original":{"line":23,"column":1}},{"generated":{"line":32,"column":0},"source":"async_await.js","original":{"line":23,"column":1}},{"generated":{"line":33,"column":0},"source":"async_await.js","original":{"line":23,"column":1}},{"generated":{"line":34,"column":0},"source":"async_await.js","original":{"line":23,"column":1}},{"generated":{"line":35,"column":0},"source":"async_await.js","original":{"line":23,"column":1}},{"generated":{"line":36,"column":0},"source":"async_await.js","original":{"line":23,"column":1}},{"generated":{"line":37,"column":0},"source":"async_await.js","original":{"line":23,"column":1}},{"generated":{"line":38,"column":0},"source":"async_await.js","original":{"line":23,"column":1}},{"name":"p","generated":{"line":38,"column":19},"source":"async_await.js","original":{"line":25,"column":25}},{"generated":{"line":38,"column":20},"source":"async_await.js","original":{"line":25,"column":26}},{"generated":{"line":38,"column":21},"source":"async_await.js","original":{"line":25,"column":27}},{"generated":{"line":38,"column":25},"source":"async_await.js","original":{"line":25,"column":26}},{"generated":{"line":38,"column":26},"source":"async_await.js","original":{"line":23,"column":1}},{"generated":{"line":40,"column":0},"source":"async_await.js","original":{"line":23,"column":1}},{"name":"ms","generated":{"line":41,"column":0},"source":"async_await.js","original":{"line":25,"column":14}},{"name":"ms","generated":{"line":41,"column":12},"source":"async_await.js","original":{"line":25,"column":14}},{"generated":{"line":41,"column":14},"source":"async_await.js","original":{"line":23,"column":1}},{"generated":{"line":42,"column":0},"source":"async_await.js","original":{"line":25,"column":34}},{"name":"console","generated":{"line":43,"column":0},"source":"async_await.js","original":{"line":26,"column":8}},{"name":"console","generated":{"line":43,"column":12},"source":"async_await.js","original":{"line":26,"column":8}},{"generated":{"line":43,"column":19},"source":"async_await.js","original":{"line":26,"column":15}},{"name":"log","generated":{"line":43,"column":20},"source":"async_await.js","original":{"line":26,"column":16}},{"generated":{"line":43,"column":23},"source":"async_await.js","original":{"line":26,"column":8}},{"name":"ms","generated":{"line":43,"column":24},"source":"async_await.js","original":{"line":26,"column":20}},{"generated":{"line":43,"column":26},"source":"async_await.js","original":{"line":26,"column":22}},{"generated":{"line":43,"column":29},"source":"async_await.js","original":{"line":26,"column":25}},{"generated":{"line":43,"column":37},"source":"async_await.js","original":{"line":26,"column":8}},{"generated":{"line":44,"column":0},"source":"async_await.js","original":{"line":23,"column":1}},{"generated":{"line":45,"column":0},"source":"async_await.js","original":{"line":23,"column":1}},{"generated":{"line":47,"column":0},"source":"async_await.js","original":{"line":23,"column":1}},{"generated":{"line":48,"column":0},"source":"async_await.js","original":{"line":23,"column":1}},{"generated":{"line":49,"column":0},"source":"async_await.js","original":{"line":23,"column":1}},{"name":"console","generated":{"line":50,"column":0},"source":"async_await.js","original":{"line":28,"column":8}},{"name":"console","generated":{"line":50,"column":12},"source":"async_await.js","original":{"line":28,"column":8}},{"generated":{"line":50,"column":19},"source":"async_await.js","original":{"line":28,"column":15}},{"name":"log","generated":{"line":50,"column":20},"source":"async_await.js","original":{"line":28,"column":16}},{"generated":{"line":50,"column":23},"source":"async_await.js","original":{"line":28,"column":8}},{"generated":{"line":52,"column":0},"source":"async_await.js","original":{"line":23,"column":1}},{"generated":{"line":53,"column":0},"source":"async_await.js","original":{"line":23,"column":1}},{"generated":{"line":54,"column":0},"source":"async_await.js","original":{"line":23,"column":1}},{"generated":{"line":55,"column":0},"source":"async_await.js","original":{"line":23,"column":1}},{"generated":{"line":56,"column":0},"source":"async_await.js","original":{"line":23,"column":1}},{"generated":{"line":57,"column":0},"source":"async_await.js","original":{"line":23,"column":1}},{"generated":{"line":58,"column":0},"source":"async_await.js","original":{"line":23,"column":1}},{"generated":{"line":58,"column":3},"source":"async_await.js","original":{"line":23,"column":0}},{"generated":{"line":60,"column":0},"source":"async_await.js","original":{"line":23,"column":0}},{"name":"main","generated":{"line":60,"column":11},"source":"async_await.js","original":{"line":23,"column":16}},{"generated":{"line":60,"column":15},"source":"async_await.js","original":{"line":23,"column":0}},{"generated":{"line":61,"column":0},"source":"async_await.js","original":{"line":23,"column":0}},{"generated":{"line":62,"column":0},"source":"async_await.js","original":{"line":23,"column":0}},{"generated":{"line":64,"column":0},"source":"async_await.js","original":{"line":23,"column":0}},{"name":"main","generated":{"line":64,"column":9},"source":"async_await.js","original":{"line":23,"column":16}},{"generated":{"line":64,"column":13},"source":"async_await.js","original":{"line":23,"column":0}},{"generated":{"line":65,"column":0},"source":"async_await.js","original":{"line":23,"column":0}},{"generated":{"line":65,"column":8},"source":"async_await.js","original":{"line":32,"column":0}}],"sources":{"async_await.js":"import \"core-js/stable\";\nimport \"regenerator-runtime/runtime\";\n/*\nasync function 함수이름() {}    \nconst 함수이름 = async () => {}\n함수이름 앞에 async 를 붙여서 사용한다. \n*/\n\n//async-await 는 Promise 를 기반으로 하고, 코드의 흐름을 위에서 아래의 방향으로 짤 수 있다는 것이 장점이다. \n\n//Promise 객체를 리턴하는 함수\nfunction p(ms) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            // resolve(ms);\n            reject(new Error('reason'));\n        }, ms);\n    });\n}\n\n//Promise 객체를 리턴하는 함수를 await 로 호출하는 방법 \n//await 를 사용하는 경우, 항상 async 함수 안에서 사용되어야 한다. \n(async function main() {\n    try {\n        const ms = await p(1000); //비동기된 처리가 끝날 때까지 기다렸다가 ms 값을 리턴하고 아래줄을 실행한다. \n        console.log(ms + ' hello');\n    } catch (error) {\n        console.log(error); \n    }\n})();\n\n//Promise 객체가 rejected 된 경우의 처리를 위해 try catch 를 이용한다.  "},"lineCount":null}},"error":null,"hash":"6ad4f7edd34b5e2a125a7802b5967121","cacheData":{"env":{}}}